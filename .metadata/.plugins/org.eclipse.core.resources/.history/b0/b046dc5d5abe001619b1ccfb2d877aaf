package helpers;

public class OldAlgorithms {

	@Override
	public boolean checkCollision() {
		if (this.position.getX() < 0) {
			double newAngle = Math.toRadians(270 + (270 - 90) * r.nextDouble());
			this.angle = newAngle;
			velocity.setX(velocity.getX() * 0.8);
			velocity.setY(velocity.getY() * 0.8);
			if (deaccelerating) {
				acceleration.setX(acceleration.getX() * -1);
				acceleration.setY(acceleration.getY() * -1);
				deaccelerating = acceleration.getX() < 0.00;
			}
		} 
		if ( this.position.getX() + BALL_WIDTH > Constants.PANEL_ANIMATION_WIDTH) {
			double newAngle = Math.toRadians(450 + (450 - 270) * r.nextDouble());
			this.angle = newAngle;
			velocity.setX(velocity.getX() * 0.8);
			velocity.setY(velocity.getY() * 0.8);
			if (deaccelerating) {
				acceleration.setX(acceleration.getX() * -1);
				acceleration.setY(acceleration.getY() * -1);
				deaccelerating = acceleration.getX() < 0.00;
			}
		}
		if (this.position.getY() < 0) {
			double newAngle = Math.toRadians(360 + (360 - 180) * r.nextDouble());
			this.angle = newAngle;
			velocity.setX(velocity.getX() * 0.8);
			velocity.setY(velocity.getY() * 0.8);
			if (deaccelerating) {
				acceleration.setX(acceleration.getX() * -1);
				acceleration.setY(acceleration.getY() * -1);
				deaccelerating = acceleration.getX() < 0.00;
			}
		}
		if (this.position.getY() + BALL_HEIGHT > Constants.PANEL_ANIMATION_HEIGHT) {
			double newAngle = Math.toRadians(180 + (180 - 0) * r.nextDouble());
			this.angle = newAngle;
			velocity.setX(velocity.getX() * 0.8);
			velocity.setY(velocity.getY() * 0.8);
			if (deaccelerating) {
				acceleration.setX(acceleration.getX() * -1);
				acceleration.setY(acceleration.getY() * -1);
				deaccelerating = acceleration.getX() < 0.00;
			}
		} 
		return true;
	}
	
}
